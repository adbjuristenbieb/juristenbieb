---
import Layout from '../layouts/Layout.astro';
---
<Layout>
  <!-- Fixed Left Filter Panel -->
  <aside class="filter-panel">
      <div class="filter-header">
        <h2>Filter</h2>
      </div>
      
      <div class="filter-content">
        <div class="search-section">
          <input id="searchInput" type="text" placeholder="Zoek op titel..." class="search-input" />
        </div>

        <div class="filter-section">
          <div class="filter-group">
            <button class="filter-toggle" data-target="filterType">
              <span>Type</span>
              <span class="filter-arrow">▼</span>
            </button>
            <div id="filterType" class="filter-options"></div>
          </div>

          <div class="filter-group">
            <button class="filter-toggle" data-target="filterThema">
              <span>Thema</span>
              <span class="filter-arrow">▼</span>
            </button>
            <div id="filterThema" class="filter-options"></div>
          </div>

          <div class="filter-group">
            <button class="filter-toggle" data-target="filterAuteur">
              <span>Auteur</span>
              <span class="filter-arrow">▼</span>
            </button>
            <div id="filterAuteur" class="filter-options"></div>
          </div>

          <div class="filter-group">
            <button class="filter-toggle" data-target="filterBron">
              <span>Bron</span>
              <span class="filter-arrow">▼</span>
            </button>
            <div id="filterBron" class="filter-options"></div>
          </div>

          <div class="filter-group">
            <button class="filter-toggle" data-target="filterDatum">
              <span>Datum</span>
              <span class="filter-arrow">▼</span>
            </button>
            <div id="filterDatum" class="filter-options">
              <label class="filter-radio"><input type="radio" name="datumFilter" value="all" checked> Alles</label>
              <label class="filter-radio"><input type="radio" name="datumFilter" value="day"> Vandaag</label>
              <label class="filter-radio"><input type="radio" name="datumFilter" value="week"> Afgelopen week</label>
              <label class="filter-radio"><input type="radio" name="datumFilter" value="month"> Afgelopen maand</label>
              <label class="filter-radio"><input type="radio" name="datumFilter" value="year"> Afgelopen jaar</label>
              <label class="filter-radio"><input type="radio" name="datumFilter" value="custom"> Aangepast bereik</label>
              <div id="customDateRange" class="custom-date-range" style="display: none;">
                <div class="date-input-group">
                  <label for="dateFrom">Van:</label>
                  <input type="date" id="dateFrom" class="date-input">
                </div>
                <div class="date-input-group">
                  <label for="dateTo">Tot:</label>
                  <input type="date" id="dateTo" class="date-input">
                </div>
                <div class="date-actions">
                  <button type="button" id="applyDateRange" class="apply-date-btn">Toepassen</button>
                  <button type="button" id="clearDateRange" class="clear-date-btn">Wissen</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        <button id="resetBtn" class="reset-button">Reset filters</button>
      </div>
    </aside>

    <!-- Main Content Area -->
    <main class="publications-main">
      <div class="publications-header">
        <h1>Publicaties</h1>
        <p id="result-count" class="result-count"></p>
      </div>
      
      <div id="pagination-info" class="pagination-info"></div>
      <div id="publicationList" class="publications-grid"></div>
      <div id="pagination-controls" class="pagination-controls"></div>
    </main>

<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    function formatDate(dateString) {
      const parsed = new Date(dateString);
      return isNaN(parsed) ? dateString : new Intl.DateTimeFormat('nl-NL', {
        day: '2-digit', month: 'long', year: 'numeric'
      }).format(parsed);
    }

    function parseDutchDate(str) {
      const maanden = {
        januari: "01", februari: "02", maart: "03", april: "04", mei: "05", juni: "06",
        juli: "07", augustus: "08", september: "09", oktober: "10", november: "11", december: "12"
      };
      const match = str?.match?.(/^(\d{1,2}) (\w+) (\d{4})$/);
      if (!match) return null;
      const [_, dag, maandStr, jaar] = match;
      const maand = maanden[maandStr.toLowerCase()];
      return maand ? new Date(`${jaar}-${maand}-${dag.padStart(2, '0')}`) : null;
    }

    function compareDatumStrings(a, b) {
      const dateA = parseDutchDate(a.datum);
      const dateB = parseDutchDate(b.datum);
      if (!dateA || !dateB) return 0;
      return dateB - dateA;
    }

    let publicaties = [];
    let filteredPublicaties = [];
    let currentPage = 1;
    const itemsPerPage = 20;

    const listEl = document.getElementById("publicationList");
    const searchInput = document.getElementById("searchInput");
    const resetBtn = document.getElementById("resetBtn");

    const unique = (arr) => [...new Set(arr)];
    const isWithinRange = (pubDate, days) => {
      const pub = parseDutchDate(pubDate);
      const now = new Date();
      return pub ? (now - pub) / (1000 * 60 * 60 * 24) <= days : false;
    };

    const getCheckedValues = id => Array.from(document.querySelectorAll(`#${id} input:checked`)).map(cb => cb.value);

    const getQueryParams = () => new URLSearchParams(window.location.search);
    const updateURL = () => {
      const params = new URLSearchParams();
      getCheckedValues("filterType").forEach(val => params.append("type", val));
      getCheckedValues("filterThema").forEach(val => params.append("thema", val));
      getCheckedValues("filterBron").forEach(val => params.append("bron", val));
      getCheckedValues("filterAuteur").forEach(val => params.append("auteur", val));
      const datum = document.querySelector("input[name=datumFilter]:checked")?.value || "all";
      if (datum !== "all") {
        params.set("datum", datum);
        if (datum === "custom") {
          const fromDate = document.getElementById("dateFrom").value;
          const toDate = document.getElementById("dateTo").value;
          if (fromDate) params.set("dateFrom", fromDate);
          if (toDate) params.set("dateTo", toDate);
        }
      }
      const zoekterm = searchInput.value.trim();
      if (zoekterm) params.set("zoek", zoekterm);
      if (currentPage > 1) params.set("page", currentPage);
      history.replaceState(null, "", `${window.location.pathname}?${params.toString()}`);
    };

    const applyURLFilters = () => {
      const params = getQueryParams();
      ["type", "thema", "bron", "auteur"].forEach(key => {
        const values = params.getAll(key);
        document.querySelectorAll(`#filter${key.charAt(0).toUpperCase() + key.slice(1)} input`).forEach(cb => {
          cb.checked = values.includes(cb.value);
        });
      });
      const datum = params.get("datum");
      if (datum) {
        const radio = document.querySelector(`input[name=datumFilter][value="${datum}"]`);
        if (radio) {
          radio.checked = true;
          if (datum === "custom") {
            document.getElementById("customDateRange").style.display = "block";
            const fromDate = params.get("dateFrom");
            const toDate = params.get("dateTo");
            if (fromDate) document.getElementById("dateFrom").value = fromDate;
            if (toDate) document.getElementById("dateTo").value = toDate;
          }
        }
      }
      const zoekterm = params.get("zoek");
      if (zoekterm) searchInput.value = zoekterm;
      const page = parseInt(params.get("page"));
      if (!isNaN(page) && page >= 1) currentPage = page;
    };

    function makeCheckboxes(items, id) {
      const container = document.getElementById(id);
      container.innerHTML = "";
      items.forEach(item => {
        const label = document.createElement("label");
        label.className = "filter-checkbox";
        label.innerHTML = `<input type="checkbox" value="${item}"/> ${item}`;
        container.appendChild(label);
      });
    }

    async function renderFilters() {
      const allTypes = unique(publicaties.map(p => p.type).filter(type => type && type.trim() !== ''));
      const allBron = unique(publicaties.map(p => p.bron));
      
      // Load predefined themes from JSON file
      let allThema = [];
      try {
        const themesResponse = await fetch("/content/themes.json");
        const themesData = await themesResponse.json();
        allThema = themesData.themes;
      } catch (error) {
        console.error("Error loading themes:", error);
        // Fallback to dynamic themes if JSON fails to load
        allThema = unique(publicaties.flatMap(p => p.thema || []));
      }
      
      // Load predefined authors from JSON file
      let allAuteurs = [];
      try {
        const auteursResponse = await fetch("/content/auteurs.json");
        const auteursData = await auteursResponse.json();
        allAuteurs = auteursData.auteurs;
      } catch (error) {
        console.error("Error loading authors:", error);
        // Fallback to dynamic authors if JSON fails to load
        allAuteurs = unique(publicaties.map(p => p.auteur));
      }
      
      makeCheckboxes(allTypes, "filterType");
      makeCheckboxes(allThema, "filterThema");
      makeCheckboxes(allBron, "filterBron");
      makeCheckboxes(allAuteurs, "filterAuteur");
    }

    function isWithinCustomRange(pubDate, fromDate, toDate) {
      const pub = parseDutchDate(pubDate);
      if (!pub) return false;
      
      const from = fromDate ? new Date(fromDate) : null;
      const to = toDate ? new Date(toDate) : null;
      
      if (from && to) {
        return pub >= from && pub <= to;
      } else if (from) {
        return pub >= from;
      } else if (to) {
        return pub <= to;
      }
      return true;
    }

    function applyFilters() {
      const selectedType = getCheckedValues("filterType");
      const selectedThema = getCheckedValues("filterThema");
      const selectedBron = getCheckedValues("filterBron");
      const selectedAuteur = getCheckedValues("filterAuteur");
      const zoekterm = searchInput.value.toLowerCase();
      const selectedDatum = document.querySelector("input[name=datumFilter]:checked")?.value || "all";

      filteredPublicaties = publicaties.filter(pub => {
        // Handle thema field - it can be a string, array, or empty
        let pubThemas = [];
        if (pub.thema) {
          if (Array.isArray(pub.thema)) {
            pubThemas = pub.thema.filter(t => t && t.trim() !== '');
          } else if (typeof pub.thema === 'string' && pub.thema.trim() !== '') {
            pubThemas = [pub.thema.trim()];
          }
        }

        // Date filtering logic
        let dateMatches = true;
        if (selectedDatum === "custom") {
          const fromDate = document.getElementById("dateFrom").value;
          const toDate = document.getElementById("dateTo").value;
          dateMatches = isWithinCustomRange(pub.datum, fromDate, toDate);
        } else if (selectedDatum !== "all") {
          dateMatches = (
            (selectedDatum === "day" && parseDutchDate(pub.datum)?.toDateString() === new Date().toDateString()) ||
            (selectedDatum === "week" && isWithinRange(pub.datum, 7)) ||
            (selectedDatum === "month" && isWithinRange(pub.datum, 30)) ||
            (selectedDatum === "year" && isWithinRange(pub.datum, 365))
          );
        }

        // Helper function to normalize author names for comparison
        const normalizeAuthorName = (name) => {
          if (!name) return '';
          // Convert "Last, First" to "First Last" and vice versa
          const commaMatch = name.match(/^(.+),\s*(.+)$/);
          if (commaMatch) {
            return `${commaMatch[2].trim()} ${commaMatch[1].trim()}`;
          }
          return name;
        };

        // Check if publication author matches any selected author (handling both name formats)
        const authorMatches = selectedAuteur.length === 0 || selectedAuteur.some(selectedAuthor => {
          if (!pub.auteur) return false;
          
          // Direct match
          if (pub.auteur.includes(selectedAuthor)) return true;
          
          // Normalized name match (handle "Last, First" vs "First Last" formats)
          const normalizedSelected = normalizeAuthorName(selectedAuthor);
          const normalizedPub = normalizeAuthorName(pub.auteur);
          
          return pub.auteur.includes(normalizedSelected) || 
                 normalizedPub.includes(selectedAuthor) ||
                 normalizedPub.includes(normalizedSelected);
        });

        // Theme filtering - if no themes selected, show all; if themes selected, publication must have at least one matching theme
        const themaMatches = selectedThema.length === 0 || 
          (pubThemas.length > 0 && pubThemas.some(pubThema => 
            selectedThema.some(selectedThema => 
              pubThema.toLowerCase().trim() === selectedThema.toLowerCase().trim()
            )
          ));

        return (
          (selectedType.length === 0 || selectedType.includes(pub.type)) &&
          themaMatches &&
          (selectedBron.length === 0 || selectedBron.includes(pub.bron)) &&
          authorMatches &&
          pub.titel.toLowerCase().includes(zoekterm) &&
          dateMatches
        );
      });
    }

    function renderAantalResultaten() {
      const countEl = document.getElementById("result-count");
      countEl.textContent = `${filteredPublicaties.length} resultaten`;
    }

    function getTypeClass(type) {
      return type.toLowerCase().replace(/\s+/g, '-');
    }

    function truncateText(text, maxLength = 150) {
      if (!text || text.length <= maxLength) return text;
      return text.substring(0, maxLength) + '...';
    }

    function renderList() {
      listEl.innerHTML = "";
      const startIndex = (currentPage - 1) * itemsPerPage;
      const pageItems = filteredPublicaties.slice(startIndex, startIndex + itemsPerPage);
      if (pageItems.length === 0) {
        listEl.innerHTML = "<p class='no-results'>Geen resultaten gevonden.</p>";
        return;
      }
      
      listEl.innerHTML = pageItems.map(pub => `
        <div class="publication-card">
          <div class="publication-type ${getTypeClass(pub.type)}">${pub.type}</div>
          <h2 class="publication-title">
            <a href="${pub.url}" target="_blank" rel="noopener noreferrer">${pub.titel}</a>
          </h2>
          <div class="publication-meta">
            ${formatDate(pub.datum)} - ${pub.bron}
          </div>
          <div class="publication-excerpt">
            ${truncateText(pub.samenvatting || 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.')}
          </div>
          ${pub.thema && pub.thema.trim() !== '' ? `
            <div class="publication-themes">
              ${Array.isArray(pub.thema) 
                ? pub.thema.filter(t => t && t.trim() !== '').map(theme => `<span class="theme-tag">${theme}</span>`).join('')
                : `<span class="theme-tag">${pub.thema}</span>`
              }
            </div>
          ` : ''}
        </div>
      `).join("");
    }

    function renderPaginationInfo() {
      let infoContainer = document.getElementById("pagination-info");
      if (!infoContainer) {
        infoContainer = document.createElement("div");
        infoContainer.id = "pagination-info";
        infoContainer.style.marginBottom = "1rem";
        listEl.before(infoContainer);
      }
      const totalPages = Math.ceil(filteredPublicaties.length / itemsPerPage);
      infoContainer.textContent = totalPages > 1 ? `Pagina ${currentPage} van ${totalPages}` : "";
    }

    function renderPaginationControls() {
      let controls = document.getElementById("pagination-controls");
      if (!controls) {
        controls = document.createElement("div");
        controls.id = "pagination-controls";
        controls.className = "pagination-controls";
        listEl.after(controls);
      }
      controls.innerHTML = "";
      const totalPages = Math.ceil(filteredPublicaties.length / itemsPerPage);
      if (totalPages <= 1) return;

      // Previous button
      const prevBtn = document.createElement("button");
      prevBtn.innerHTML = "← Vorige";
      prevBtn.disabled = currentPage === 1;
      prevBtn.addEventListener("click", () => {
        if (currentPage > 1) {
          currentPage--;
          updateURL();
          renderAantalResultaten();
          renderPaginationInfo();
          renderList();
          renderPaginationControls();
        }
      });
      controls.appendChild(prevBtn);

      // Page numbers (show max 5 pages around current page)
      const maxVisible = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
      let endPage = Math.min(totalPages, startPage + maxVisible - 1);
      
      // Adjust start if we're near the end
      if (endPage - startPage < maxVisible - 1) {
        startPage = Math.max(1, endPage - maxVisible + 1);
      }

      // First page + ellipsis if needed
      if (startPage > 1) {
        const firstBtn = document.createElement("button");
        firstBtn.textContent = "1";
        firstBtn.addEventListener("click", () => {
          currentPage = 1;
          updateURL();
          renderAantalResultaten();
          renderPaginationInfo();
          renderList();
          renderPaginationControls();
        });
        controls.appendChild(firstBtn);

        if (startPage > 2) {
          const ellipsis = document.createElement("span");
          ellipsis.textContent = "...";
          ellipsis.style.padding = "0.5rem";
          ellipsis.style.color = "#6c757d";
          controls.appendChild(ellipsis);
        }
      }

      // Visible page numbers
      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        if (i === currentPage) btn.disabled = true;
        btn.addEventListener("click", () => {
          currentPage = i;
          updateURL();
          renderAantalResultaten();
          renderPaginationInfo();
          renderList();
          renderPaginationControls();
        });
        controls.appendChild(btn);
      }

      // Ellipsis + last page if needed
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const ellipsis = document.createElement("span");
          ellipsis.textContent = "...";
          ellipsis.style.padding = "0.5rem";
          ellipsis.style.color = "#6c757d";
          controls.appendChild(ellipsis);
        }

        const lastBtn = document.createElement("button");
        lastBtn.textContent = totalPages;
        lastBtn.addEventListener("click", () => {
          currentPage = totalPages;
          updateURL();
          renderAantalResultaten();
          renderPaginationInfo();
          renderList();
          renderPaginationControls();
        });
        controls.appendChild(lastBtn);
      }

      // Next button
      const nextBtn = document.createElement("button");
      nextBtn.innerHTML = "Volgende →";
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.addEventListener("click", () => {
        if (currentPage < totalPages) {
          currentPage++;
          updateURL();
          renderAantalResultaten();
          renderPaginationInfo();
          renderList();
          renderPaginationControls();
        }
      });
      controls.appendChild(nextBtn);
    }

    const refresh = () => {
      applyFilters();
      renderAantalResultaten();
      renderPaginationInfo();
      renderList();
      renderPaginationControls();
      updateURL();
    };

    resetBtn.addEventListener("click", () => {
      document.querySelectorAll("input[type=checkbox]").forEach(cb => cb.checked = false);
      document.querySelector("input[name=datumFilter][value=all]").checked = true;
      document.getElementById("customDateRange").style.display = "none";
      document.getElementById("dateFrom").value = "";
      document.getElementById("dateTo").value = "";
      searchInput.value = "";
      currentPage = 1;
      refresh();
    });

    // Custom date range functionality
    document.addEventListener("change", (e) => {
      if (e.target.matches("input[name=datumFilter]")) {
        const customDateRange = document.getElementById("customDateRange");
        if (e.target.value === "custom") {
          customDateRange.style.display = "block";
        } else {
          customDateRange.style.display = "none";
          currentPage = 1;
          refresh();
        }
      } else if (e.target.matches("input[type=checkbox]")) {
        currentPage = 1;
        refresh();
      }
    });

    // Apply custom date range
    document.getElementById("applyDateRange").addEventListener("click", () => {
      const fromDate = document.getElementById("dateFrom").value;
      const toDate = document.getElementById("dateTo").value;
      
      if (!fromDate && !toDate) {
        alert("Selecteer ten minste één datum om te filteren.");
        return;
      }
      
      if (fromDate && toDate && new Date(fromDate) > new Date(toDate)) {
        alert("De 'Van' datum moet eerder zijn dan de 'Tot' datum.");
        return;
      }
      
      currentPage = 1;
      refresh();
    });

    // Clear custom date range
    document.getElementById("clearDateRange").addEventListener("click", () => {
      document.getElementById("dateFrom").value = "";
      document.getElementById("dateTo").value = "";
      currentPage = 1;
      refresh();
    });

    // Filter toggle functionality
    document.addEventListener("click", (e) => {
      if (e.target.matches(".filter-toggle")) {
        const filterGroup = e.target.closest(".filter-group");
        const isActive = filterGroup.classList.contains("active");
        
        // Close all other filter groups
        document.querySelectorAll(".filter-group").forEach(group => {
          group.classList.remove("active");
        });
        
        // Toggle current group
        if (!isActive) {
          filterGroup.classList.add("active");
        }
      }
    });

    // Search input event listener
    searchInput.addEventListener("input", () => {
      currentPage = 1;
      refresh();
    });

    fetch("/content/publicaties.json")
      .then(res => res.json())
      .then(async (data) => {
        publicaties = data.sort(compareDatumStrings);
        await renderFilters();
        applyURLFilters();
        applyFilters();
        renderAantalResultaten();
        renderPaginationInfo();
        renderList();
        renderPaginationControls();
      });
  });
</script>
</Layout>
